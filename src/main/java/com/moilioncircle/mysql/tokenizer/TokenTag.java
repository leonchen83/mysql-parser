package com.moilioncircle.mysql.tokenizer;

import com.sun.org.apache.xpath.internal.compiler.Keywords;

import static com.moilioncircle.mysql.tokenizer.TokenType.DEFAULT;
import static com.moilioncircle.mysql.tokenizer.TokenType.KEYWORDS;

/**
 * Copyright leon
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author leon on 15-12-6
 */
public enum TokenTag {
    HEX("HEX", TokenType.DEFAULT), BIT("BIT", TokenType.DEFAULT), IDENT("IDENT", TokenType.DEFAULT), STRING("STRING", TokenType.DEFAULT), TRUE("TRUE", KEYWORDS), FALSE("FALSE", KEYWORDS), NULL("NULL", KEYWORDS), NUMBER("NUMBER", TokenType.DEFAULT),
    DOT("DOT", KEYWORDS), PLUS("PLUS", KEYWORDS), MINUS("MINUS", KEYWORDS), EOF("EOF", TokenType.DEFAULT),
    //DROP TABLE
    DROP("DROP", KEYWORDS), TEMPORARY("TEMPORARY", KEYWORDS), TABLE("TABLE", KEYWORDS), IF("IF", KEYWORDS),
    EXISTS("EXISTS", KEYWORDS), RESTRICT("RESTRICT", KEYWORDS), CASCADE("CASCADE", KEYWORDS),
    COMMA("COMMA", KEYWORDS),RENAME("RENAME",KEYWORDS),TO("TO",KEYWORDS),
    //
    ALTER("ALTER",KEYWORDS),ONLINE("ONLINE",KEYWORDS),OFFLINE("OFFLINE",KEYWORDS),IGNORE("IGNORE",KEYWORDS),ADD("ADD",KEYWORDS),
    COLUMN("COLUMN",KEYWORDS),FIRST("FIRST",KEYWORDS),AFTER("AFTER",KEYWORDS),INDEX("INDEX",KEYWORDS),KEY("KEY",KEYWORDS),
    CONSTRAINT("CONSTRAINT",KEYWORDS),PRIMARY("PRIMARY",KEYWORDS),UNIQUE("UNIQUE",KEYWORDS),FULLTEXT("FULLTEXT",KEYWORDS),
    SPATIAL("SPATIAL",KEYWORDS),FOREIGN("FOREIGN",KEYWORDS),ALGORITHM("ALGORITHM",KEYWORDS),EQUAL("EQUAL",KEYWORDS),DEFAULT("DEFAULT",KEYWORDS),
    INPLACE("INPLACE",KEYWORDS),COPY("COPY",KEYWORDS),SET("SET",KEYWORDS),CHANGE("CHANGE",KEYWORDS),LOCK("LOCK",KEYWORDS),
    NONE("NONE",KEYWORDS),SHARED("SHARED",KEYWORDS),EXCLUSIVE("EXCLUSIVE",KEYWORDS),
    MODIFY("MODIFY",KEYWORDS),DISABLE("DISABLE",KEYWORDS),KEYS("KEYS",KEYWORDS),ENABLE("ENABLE",KEYWORDS),
    AS("AS",KEYWORDS),ORDER("ORDER",KEYWORDS),BY("BY",KEYWORDS),CONVERT("CONVERT",KEYWORDS),
    CHARACTER("CHARACTER",KEYWORDS),COLLATE("COLLATE",KEYWORDS),DISCARD("DISCARD",KEYWORDS),
    TABLESPACE("TABLESPACE",KEYWORDS),IMPORT("IMPORT",KEYWORDS),FORCE("FORCE",KEYWORDS),
    PARTITION("PARTITION",KEYWORDS),TRUNCATE("TRUNCATE",KEYWORDS),COALESCE("COALESCE",KEYWORDS),
    REORGANIZE("REORGANIZE",KEYWORDS),ALL("ALL",KEYWORDS),INTO("INTO",KEYWORDS),
    EXCHANGE("EXCHANGE",KEYWORDS),WITH("WITH",KEYWORDS),ANALYZE("ANALYZE",KEYWORDS),CHECK("CHECK",KEYWORDS),
    OPTIMIZE("OPTIMIZE",KEYWORDS),REBUILD("REBUILD",KEYWORDS),REPAIR("REPAIR",KEYWORDS),
    REMOVE("REMOVE",KEYWORDS),ASC("ASC",KEYWORDS),DESC("DESC",KEYWORDS),USING("USING",KEYWORDS),
    BTREE("BTREE",KEYWORDS),HASH("HASH",KEYWORDS),KEY_BLOCK_SIZE("KEY_BLOCK_SIZE",KEYWORDS),
    PARSER("PARSER",KEYWORDS),COMMENT("COMMENT",KEYWORDS),
    LPAREN("LPAREN",KEYWORDS),RPAREN("RPAREN",KEYWORDS);
    public String tagName;
    public TokenType type;

    TokenTag(String tagName, TokenType type) {
        this.tagName = tagName;
        this.type = type;
    }
}
