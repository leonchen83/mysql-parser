package com.moilioncircle.mysql.tokenizer;

import com.moilioncircle.mysql.parser.Assoc;

import static com.moilioncircle.mysql.tokenizer.TokenType.KEYWORDS;
import static com.moilioncircle.mysql.parser.Assoc.*;
/**
 * Copyright leon
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author leon on 15-12-6
 */
public enum TokenTag {
    HEX_VALUE("HEX_VALUE", TokenType.DEFAULT), BIT_VALUE("BIT_VALUE", TokenType.DEFAULT),
    IDENT("IDENT", TokenType.DEFAULT), STRING("STRING", TokenType.DEFAULT), TRUE("TRUE", KEYWORDS),
    FALSE("FALSE", KEYWORDS), NULL("NULL", KEYWORDS), NUMBER("NUMBER", TokenType.DEFAULT),
    DOT("DOT", KEYWORDS), EOF("EOF", TokenType.DEFAULT),
    //DROP TABLE
    DROP("DROP", KEYWORDS), TEMPORARY("TEMPORARY", KEYWORDS), TABLE("TABLE", KEYWORDS), IF("IF", KEYWORDS),
    EXISTS("EXISTS", KEYWORDS), RESTRICT("RESTRICT", KEYWORDS), CASCADE("CASCADE", KEYWORDS),
    COMMA("COMMA", KEYWORDS), RENAME("RENAME", KEYWORDS), TO("TO", KEYWORDS),
    //
    ALTER("ALTER", KEYWORDS), ONLINE("ONLINE", KEYWORDS), OFFLINE("OFFLINE", KEYWORDS),
    IGNORE("IGNORE", KEYWORDS), ADD("ADD", KEYWORDS),
    COLUMN("COLUMN", KEYWORDS), FIRST("FIRST", KEYWORDS), AFTER("AFTER", KEYWORDS),
    INDEX("INDEX", KEYWORDS), KEY("KEY", KEYWORDS),
    CONSTRAINT("CONSTRAINT", KEYWORDS), PRIMARY("PRIMARY", KEYWORDS), UNIQUE("UNIQUE", KEYWORDS),
    FULLTEXT("FULLTEXT", KEYWORDS),
    SPATIAL("SPATIAL", KEYWORDS), FOREIGN("FOREIGN", KEYWORDS), ALGORITHM("ALGORITHM", KEYWORDS),
    DEFAULT("DEFAULT", KEYWORDS),
    INPLACE("INPLACE", KEYWORDS), COPY("COPY", KEYWORDS), SET("SET", KEYWORDS),
    CHANGE("CHANGE", KEYWORDS), LOCK("LOCK", KEYWORDS),
    NONE("NONE", KEYWORDS), SHARED("SHARED", KEYWORDS), EXCLUSIVE("EXCLUSIVE", KEYWORDS),
    MODIFY("MODIFY", KEYWORDS), DISABLE("DISABLE", KEYWORDS), KEYS("KEYS", KEYWORDS),
    ENABLE("ENABLE", KEYWORDS),
    AS("AS", KEYWORDS), ORDER("ORDER", KEYWORDS), BY("BY", KEYWORDS), CONVERT("CONVERT", KEYWORDS),
    CHARACTER("CHARACTER", KEYWORDS), DISCARD("DISCARD", KEYWORDS),
    TABLESPACE("TABLESPACE", KEYWORDS), IMPORT("IMPORT", KEYWORDS), FORCE("FORCE", KEYWORDS),
    PARTITION("PARTITION", KEYWORDS), TRUNCATE("TRUNCATE", KEYWORDS), COALESCE("COALESCE", KEYWORDS),
    REORGANIZE("REORGANIZE", KEYWORDS), ALL("ALL", KEYWORDS), INTO("INTO", KEYWORDS),
    EXCHANGE("EXCHANGE", KEYWORDS), WITH("WITH", KEYWORDS), ANALYZE("ANALYZE", KEYWORDS),
    CHECK("CHECK", KEYWORDS),
    OPTIMIZE("OPTIMIZE", KEYWORDS), REBUILD("REBUILD", KEYWORDS), REPAIR("REPAIR", KEYWORDS),
    REMOVE("REMOVE", KEYWORDS), ASC("ASC", KEYWORDS), DESC("DESC", KEYWORDS), USING("USING", KEYWORDS),
    BTREE("BTREE", KEYWORDS), HASH("HASH", KEYWORDS), KEY_BLOCK_SIZE("KEY_BLOCK_SIZE", KEYWORDS),
    PARSER("PARSER", KEYWORDS), COMMENT("COMMENT", KEYWORDS),
    LPAREN("LPAREN", KEYWORDS), RPAREN("RPAREN", KEYWORDS), PARTITIONING("PARTITIONING", KEYWORDS),
    ENGINE("ENGINE", KEYWORDS), AUTO_INCREMENT("AUTO_INCREMENT", KEYWORDS),
    AVG_ROW_LENGTH("AVG_ROW_LENGTH", KEYWORDS),
    CHECKSUM("CHECKSUM", KEYWORDS), CONNECTION("CONNECTION", KEYWORDS), DATA("DATA", KEYWORDS),
    DIRECTORY("DIRECTORY", KEYWORDS),
    DELAY_KEY_WRITE("DELAY_KEY_WRITE", KEYWORDS), INSERT_METHOD("INSERT_METHOD", KEYWORDS),
    NO("NO", KEYWORDS), MAX_ROWS("MAX_ROWS", KEYWORDS), MIN_ROWS("MIN_ROWS", KEYWORDS),
    PACK_KEYS("PACK_KEYS", KEYWORDS), PASSWORD("PASSWORD", KEYWORDS), ROW_FORMAT("ROW_FORMAT", KEYWORDS),
    DYNAMIC("DYNAMIC", KEYWORDS), FIXED("FIXED", KEYWORDS), COMPRESSED("COMPRESSED", KEYWORDS),
    REDUNDANT("REDUNDANT", KEYWORDS),
    COMPACT("COMPACT", KEYWORDS), STATS_AUTO_RECALC("STATS_AUTO_RECALC", KEYWORDS),
    STATS_PERSISTENT("STATS_PERSISTENT", KEYWORDS), STATS_SAMPLE_PAGES("STATS_SAMPLE_PAGES", KEYWORDS),
    STORAGE("STORAGE", KEYWORDS), DISK("DISK", KEYWORDS), MEMORY("MEMORY", KEYWORDS),
    UNION("UNION", KEYWORDS),
    LAST("LAST", KEYWORDS), LINEAR("LINEAR", KEYWORDS), RANGE("RANGE", KEYWORDS),
    COLUMNS("COLUMNS", KEYWORDS),
    LIST("LIST", KEYWORDS), PARTITIONS("PARTITIONS", KEYWORDS), SUBPARTITION("SUBPARTITION", KEYWORDS),
    SUBPARTITIONS("SUBPARTITIONS", KEYWORDS), VALUES("VALUES", KEYWORDS), LESS("LESS", KEYWORDS),
    THAN("THAN", KEYWORDS),
    MAXVALUE("MAXVALUE", KEYWORDS), NODEGROUP("NODEGROUP", KEYWORDS),
    REFERENCES("REFERENCES", KEYWORDS),
    MATCH("MATCH", KEYWORDS), FULL("FULL", KEYWORDS), PARTIAL("PARTIAL", KEYWORDS),
    SIMPLE("SIMPLE", KEYWORDS),
    ON("ON", KEYWORDS), DELETE("DELETE", KEYWORDS), UPDATE("UPDATE", KEYWORDS),
    ACTION("ACTION", KEYWORDS),
    COLUMN_FORMAT("COLUMN_FORMAT", KEYWORDS), BIT("BIT", KEYWORDS), TINYINT("TINYINT", KEYWORDS),
    UNSIGNED("UNSIGNED", KEYWORDS),
    ZEROFILL("ZEROFILL", KEYWORDS), SMALLINT("SMALLINT", KEYWORDS), MEDIUMINT("MEDIUMINT", KEYWORDS),
    INT("INT", KEYWORDS),
    INTEGER("INTEGER", KEYWORDS), BIGINT("BIGINT", KEYWORDS), REAL("REAL", KEYWORDS),
    DOUBLE("DOUBLE", KEYWORDS), FLOAT("FLOAT", KEYWORDS),
    NUMERIC("NUMERIC", KEYWORDS), DATE("DATE", KEYWORDS), TIME("TIME", KEYWORDS),
    TIMESTAMP("TIMESTAMP", KEYWORDS), DATETIME("DATETIME", KEYWORDS),
    YEAR("YEAR", KEYWORDS), CHAR("CHAR", KEYWORDS),
    VARCHAR("VARCHAR", KEYWORDS), VARBINARY("VARBINARY", KEYWORDS),
    TINYBLOB("TINYBLOB", KEYWORDS), BLOB("BLOB", KEYWORDS), MEDIUMBLOB("MEDIUMBLOB", KEYWORDS),
    LONGBLOB("LONGBLOB", KEYWORDS),
    TINYTEXT("TINYTEXT", KEYWORDS), TEXT("TEXT", KEYWORDS), MEDIUMTEXT("MEDIUMTEXT", KEYWORDS),
    LONGTEXT("LONGTEXT", KEYWORDS),
    ENUM("ENUM", KEYWORDS), DECIMAL("DECIMAL", KEYWORDS), CREATE("CREATE", KEYWORDS),
    REPLACE("REPLACE", KEYWORDS), SELECT("SELECT", KEYWORDS),
    CURRENT_TIMESTAMP("CURRENT_TIMESTAMP", KEYWORDS), LOCALTIMESTAMP("LOCALTIMESTAMP", KEYWORDS),
    NOW("NOW", KEYWORDS), LOCALTIME("LOCALTIME", KEYWORDS), CURRENT_DATE("CURRENT_DATE", KEYWORDS),
    CHARSET("CHARSET", KEYWORDS),UNKNOWN("UNKNOWN",KEYWORDS),ANY("ANY",KEYWORDS),SOUNDS("SOUNDS",KEYWORDS),
    ESCAPE("ESCAPE",KEYWORDS), PARAM_MARKER("PARAM_MARKER",KEYWORDS),ROW("ROW",KEYWORDS),
    //OPERATORS
    INTERVAL("INTERVAL",KEYWORDS,1000),
    BINARY("BINARY", KEYWORDS,950,RIGHT),COLLATE("COLLATE", KEYWORDS,950),
    NOT_OPERATOR("!",KEYWORDS,900,RIGHT),
    UNARY_MINUS("-",KEYWORDS,850,RIGHT),UNARY_BIT("~",KEYWORDS,850,RIGHT),UNARY_PLUS("+",KEYWORDS,850,RIGHT),
    EOR("^",KEYWORDS,800,RIGHT),
    STAR("*",KEYWORDS,750),SLASH("/",KEYWORDS,750),REMAINDER("%",KEYWORDS,750),DIV("DIV",KEYWORDS,750),MOD("MOD",KEYWORDS,750),
    MINUS("-", KEYWORDS,700),PLUS("+",KEYWORDS,700),
    LTLT("<<",KEYWORDS,650),GTGT(">>",KEYWORDS,650),
    BIT_AND("&",KEYWORDS,600),
    BIT_OR("|",KEYWORDS,550),
    EQUAL("=", KEYWORDS),LTEQGT("<=>",KEYWORDS,500),GE(">=",KEYWORDS,500),GT(">",KEYWORDS,500),LE("<=",KEYWORDS,500),LT("<",KEYWORDS,500),LTGT("<>",KEYWORDS,500),NOT_EQ("!=",KEYWORDS,500),IS("IS",KEYWORDS,500),LIKE("LIKE",KEYWORDS,500),REGEXP("REGEXP",KEYWORDS,500),IN("IN",KEYWORDS,500),
    BETWEEN("BETWEEN",KEYWORDS,450),CASE("CASE",KEYWORDS,450),WHEN("WHEN",KEYWORDS,450),THEN("THEN",KEYWORDS,450),ELSE("ELSE",KEYWORDS,450),
    NOT("NOT",KEYWORDS,400,RIGHT),
    AND("AND",KEYWORDS,350),BABA("&&",KEYWORDS,350),
    XOR("XOR",KEYWORDS,300),
    OR("OR",KEYWORDS,250),BOBO("||",KEYWORDS,250),
    ASSIGN("=",KEYWORDS,200,RIGHT),COLONASSIGN(":=",KEYWORDS,200,RIGHT);
    public String tagName;
    public TokenType type;
    public int prec;
    public Assoc assoc;

    TokenTag(String tagName, TokenType type) {
        this.tagName = tagName;
        this.type = type;
        this.prec = 0;
        this.assoc = LEFT;

    }

    TokenTag(String tagName, TokenType type, int prec) {
        this.tagName = tagName;
        this.type = type;
        this.prec = prec;
        this.assoc = LEFT;
    }

    TokenTag(String tagName, TokenType type, int prec,Assoc assoc) {
        this.tagName = tagName;
        this.type = type;
        this.prec = prec;
        this.assoc = assoc;
    }
}
